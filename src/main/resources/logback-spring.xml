<?xml version="1.0" encoding="UTF-8"?>
<!-- 推荐使用logback-spring.xml 可以使用<springProfile>读取yml配置文件中的变量 -->
<!--
<springProfile>标签的使用
    <springProfile name="dev"></springProfile> 表示dev环境生效
读取yml属性
    <springProperty scope="context" name="logName" source="logName"(yml配置文件的属性名)
    defaultValue="logName"(如果没有的话指定默认值)/> -->

<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false">
    <!-- 定义参数常量，便于后面直接用${name}来获取value值 -->
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="logs" />
    <property name="LOG_FILE" value="learnCode"/>
    <!--
        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
        -->
    <property name="pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>

    <!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当天生成的日志文件的路径 -->
        <file>${LOG_HOME}/${LOG_FILE}.log</file>

        <!-- 设置基于时间(每天)的滚动策略，也就是将日志内容按照日期来写入到相应的文件中-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 当天之前的每天生成的日志文件的路径 -->
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时
            -->
            <FileNamePattern>${LOG_HOME}/${LOG_FILE}-%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--单个日志文件最大的大小-->
            <!--<maxFileSize>20MB</maxFileSize>-->
            <!--日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!--所有的日志文件最大容量，超过就会删除旧的日志-->
            <totalSizeCap>30GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>

        <!-- 日志级别限定 -->
        <!--
        作用是拒绝写入所有与<level>不匹配的日志信息
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        -->
    </appender>

    <!-- 监听***.***.***包下所有类产生的日志信息
         不设置additivity属性，那么默认additivity = true,表示会继承父级（在这里它的父级只有root一个），
         也就是会将日志信息也输出在控制台，但级别会覆盖父级的级别，也就是输出debug级别及以上的日志信息 -->
    <!--
    <logger name="***.***.***" level="debug">
        表示按照debugAppender的设置去打印日志
        <appender-ref ref="CONSOLE"/>
        表示按照infoAppender的设置去打印日志
        <appender-ref ref="FILE"/>
    </logger>
    -->

    <!--
        是所有<logger>的父级
        root配置必须在appender下边
        root节点是对所有appender的管理,添加哪个appender就会打印哪个appender的日志
        root节点的level是总的日志级别控制,如果appender的日志级别设定比root的高,会按照appender的日志级别打印日志
        如果appender的日志级别比root的低,会按照root设定的日志级别进行打印日志
        也就是说root设定的日志级别是最低限制
     -->
    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>